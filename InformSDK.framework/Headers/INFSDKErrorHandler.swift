//
//  INFSDKErrorHandler.swift
//  InformSDK
//
//  Created by Mudit on 14/12/15.
//  Copyright © 2015 INFORM. All rights reserved.
//

import Foundation

//// ☠️Custom ⛔️ Types for Playback Controller
public enum INFPlaybackControllerError: ErrorType {
    case InvalidDivTag
    case InvalidPlayerConfigurations
    case InvalidPlayerDimensions
    case InvalidTrackingGroupId
    case InvalidWidgetId
    case NoError
}

/// ☠️Custom ⛔️ types for Playback Error
public enum INFPlaybackError : ErrorType{
    case PlaybackFailed(ErrorAttributes)
    case PauseFailed(ErrorAttributes)
    case StopFailed(ErrorAttributes)
    case PlayerNotInitialized(ErrorAttributes)
    case PlayerNotReady(ErrorAttributes)
    case PlayerStatusUnkown(ErrorAttributes)
    case InvalidSeekTime(ErrorAttributes)
}



public struct ErrorAttributes{
    let Code : Int
    let Domain = "com.informsdk.error"
    let Description : String
}

/// The `Error` struct provides a convenience for creating custom Inform SDK NSErrors.
public struct INFError {
    /// The domain used for creating all Inform SDK errors.
    public static let Domain = "com.informsdk.error"
    
    /// The custom error codes generated by Inform SDK.
    public enum Code: Int {
        case InvalidDivTag                   = -9000
        case InvalidPlayerConfigurations     = -9001
        case InvalidPlayerDimensions         = -9003
        case InvalidTrackingGroupId          = -9004
        case InvalidWidgetId                  = -9005
    }
    
    public enum PlaybackErrorCode : Int{
        case PlaybackFailed                 = -6000
        case PauseFailed                    = -6001
        case StopFailed                     = -6002
        case PlayerNotInitialized           = -6003
        case PlayerNotReady                 = -6004
        case PlayerStatusUnknown            = -6005
        case PlayerUnknownError             = -6006
        case InvalidSeekTimeInterval        = -6007
        case UnknownError                   = -6008
    }
    
    public enum NetworkError : Int {
        case NetworkUnavailable             = -2000
        case NetworkInvalidData             = -2001
        case NetworkInvalidRequest          = -2002
        case NetworkRequestFailure          = -2003
        case NetworkRequestCanceled         = -2004
    }
    
    /**
     Creates an `NSError` with the given error code and failure reason.
     - parameter code:          The error code.
     - parameter failureReason: The failure reason.
     - returns: An `NSError` with the given error code and failure reason.
     */
//    public static func errorWithCode(code: Code, failureReason: String) -> NSError {
//        return errorWithCode(code.rawValue, failureReason: failureReason)
//    }
    
    /**
     Creates an `NSError` with the given error code and failure reason.
     - parameter code:          The error code.
     - parameter failureReason: The failure reason.
     - returns: An `NSError` with the given error code and failure reason.
     */
    public static func errorWithCode(code: Int, failureReason: String) -> NSError {
        let userInfo = [NSLocalizedFailureReasonErrorKey: failureReason]
        return NSError(domain: Domain, code: code, userInfo: userInfo)
    }
}